// Time Complexity : 0(logN)
// Space Complexity : 0(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach in three sentences only

After finding middle element check if left side is sorted. If yes then check if target element exist. 
If left side is not sorted then that means right side is sorted and move L = Mid+1 and find target element


class Solution {
    public int search(int[] nums, int target) {
        
        //Base Condition
        if(nums.length == 0 || nums == null)
        {
            return -1;
        }
        int low = 0;
        int high = nums.length - 1;

        while(low <= high)
        {
            int mid = low + (high-low)/2; // Prevent Integer Overflow
            if(nums[mid] == target)
            {
                return mid;
            }
            // Check if left side is Sorted  
            if(nums[low]<=nums[mid])
            {
                if(target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {

                low = mid + 1;

                }
                
            }
            else {

                if(target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                     high = mid - 1;
                }

                
            }

        }
        return -1;

    }
}
